/**
 * Service de monitoring optimis√© avec √©v√©nements temps r√©el
 * √âvite le polling en utilisant les √©v√©nements Outlook natifs
 */

const EventEmitter = require('events');
const databaseService = require('./databaseService'); // Import du singleton

class OptimizedMonitoringService extends EventEmitter {
    constructor(outlookConnector = null) {
        super();
        
        this.outlookConnector = outlookConnector; // Utiliser la connexion existante
        this.dbService = databaseService; // Utiliser le singleton
        this.isInitialized = false;
        this.isMonitoring = false;
        this.monitoredFolders = [];
        this.initialSyncCompleted = false;
        
        // Configuration avec debug d√©taill√©
        this.config = {
            enableEventLogging: true,
            performInitialSync: true,
            autoStartMonitoring: true,
            eventDebounceMs: 1000, // √âviter les √©v√©nements en rafale
            debugMode: true, // Mode debug activ√©
            detailedLogging: true // Logs d√©taill√©s
        };
        
        // Debouncing des √©v√©nements
        this.eventDebounceTimers = new Map();
        
        // Compteurs pour diagnostics
        this.diagnostics = {
            pollingCycles: 0,
            foldersScanned: 0,
            emailsProcessed: 0,
            errors: 0,
            lastScanTime: null,
            scanDurations: []
        };
        
        this.log('üöÄ Service de monitoring optimis√© initialis√©', 'INIT');
        this.logDebug('üìä Configuration:', this.config);
        this.logDebug('üîó OutlookConnector disponible:', !!this.outlookConnector);
    }

    async initialize(foldersConfig = []) {
        try {
            this.log('üîß Initialisation du service de monitoring...', 'INIT');
            this.logDebug('üì• Configuration re√ßue:', foldersConfig);
            
            // Convertir la configuration des dossiers si n√©cessaire
            if (typeof foldersConfig === 'object' && !Array.isArray(foldersConfig)) {
                this.logDebug('üîÑ Conversion objet vers tableau...');
                // Convertir objet en tableau
                this.monitoredFolders = Object.entries(foldersConfig).map(([path, config]) => ({
                    path: path,
                    name: config.name,
                    type: config.category,
                    enabled: true
                }));
                this.logDebug('‚úÖ Conversion termin√©e:', this.monitoredFolders);
            } else {
                this.logDebug('üìã Configuration d√©j√† en tableau');
                // Configuration d√©j√† en tableau
                this.monitoredFolders = foldersConfig.filter(folder => folder.enabled);
            }
            
            this.log(`üìÅ ${this.monitoredFolders.length} dossiers configur√©s pour le monitoring`, 'CONFIG');
            this.logDebug('üìÇ Dossiers d√©taill√©s:', this.monitoredFolders);
            
            // Initialiser la base de donn√©es
            this.log('üóÑÔ∏è Initialisation de la base de donn√©es...', 'DB');
            await this.dbService.initialize();
            this.log('‚úÖ Base de donn√©es initialis√©e', 'DB');
            
            // V√©rifier qu'une connexion Outlook est disponible
            if (!this.outlookConnector) {
                this.log('‚ùå Aucune connexion Outlook fournie', 'ERROR');
                throw new Error('Connexion Outlook requise pour le mode optimis√©');
            }
            
            this.logDebug('üîç Type de connecteur Outlook:', this.outlookConnector.constructor.name);
            this.logDebug('üîç M√©thodes disponibles:', Object.getOwnPropertyNames(Object.getPrototypeOf(this.outlookConnector)));
            
            // Mode optimis√© sans √©v√©nements temps r√©el
            // Utilise un polling intelligent avec cache
            this.log('‚ö° Mode optimis√© avec polling intelligent activ√©', 'MODE');
            
            this.isInitialized = true;
            this.log('‚úÖ Service de monitoring initialis√© avec succ√®s', 'INIT');
            
            // D√©marrer le monitoring si configur√©
            if (this.config.autoStartMonitoring) {
                this.log('üîÑ D√©marrage automatique du monitoring...', 'AUTO');
                await this.startMonitoring();
            } else {
                this.log('‚è∏Ô∏è D√©marrage automatique d√©sactiv√©', 'CONFIG');
            }
            
        } catch (error) {
            this.log(`‚ùå Erreur initialisation: ${error.message}`, 'ERROR');
            this.log(`üìú Stack trace: ${error.stack}`, 'ERROR');
            this.diagnostics.errors++;
            throw error;
        }
    }

    setupOutlookEventHandlers() {
        this.log('üéß Configuration des gestionnaires d\'√©v√©nements...');
        
        // Nouveaux emails
        this.outlookConnector.on('newMail', async (data) => {
            this.log('üì¨ √âv√©nement: Nouveau mail d√©tect√©');
            await this.handleNewMailEvent(data);
        });
        
        // Email ajout√© (plus fiable que newMail)
        this.outlookConnector.on('itemAdd', async (data) => {
            this.log(`‚ûï √âv√©nement: Email ajout√© (${data.entryId})`);
            await this.handleItemAddEvent(data);
        });
        
        // Email modifi√© (lecture, d√©placement, etc.)
        this.outlookConnector.on('itemChange', async (data) => {
            this.log(`üìù √âv√©nement: Email modifi√© (${data.entryId}, non-lu: ${data.unread})`);
            await this.handleItemChangeEvent(data);
        });
        
        // Email supprim√©
        this.outlookConnector.on('itemRemove', async (data) => {
            this.log('üóëÔ∏è √âv√©nement: Email supprim√©');
            await this.handleItemRemoveEvent(data);
        });
        
        // √âcouteurs pr√™ts
        this.outlookConnector.on('listenersReady', () => {
            this.log('‚úÖ √âcouteurs d\'√©v√©nements Outlook pr√™ts');
            this.emit('eventListenersReady');
        });
    }

    async waitForEventListeners() {
        return new Promise((resolve) => {
            if (this.outlookConnector.hasEventListeners) {
                resolve();
            } else {
                this.outlookConnector.once('listenersReady', resolve);
            }
        });
    }

    async startMonitoring() {
        try {
            this.log('üöÄ D√©marrage du monitoring optimis√©...', 'INIT');
            this.logDebug('üöÄ √âtat avant d√©marrage:', {
                isInitialized: this.isInitialized,
                isMonitoring: this.isMonitoring,
                foldersCount: this.monitoredFolders.length,
                outlookConnector: !!this.outlookConnector
            });
            
            if (!this.isInitialized) {
                this.log('‚ùå Service non initialis√©', 'ERROR');
                throw new Error('Service non initialis√©');
            }
            
            // Synchronisation initiale si n√©cessaire
            if (this.config.performInitialSync && !this.initialSyncCompleted) {
                this.log('üîÑ Lancement de la synchronisation initiale...', 'SYNC');
                await this.performInitialSync();
            } else if (this.initialSyncCompleted) {
                this.log('‚úÖ Synchronisation initiale d√©j√† effectu√©e', 'SYNC');
            } else {
                this.log('‚è≠Ô∏è Synchronisation initiale d√©sactiv√©e', 'CONFIG');
            }
            
            // D√©marrer le polling intelligent
            this.log('üì° D√©marrage du polling intelligent...', 'POLLING');
            this.startIntelligentPolling();
            
            this.isMonitoring = true;
            this.log('‚úÖ Monitoring d√©marr√© - polling intelligent actif', 'SUCCESS');
            this.logDebug('‚úÖ √âtat apr√®s d√©marrage:', {
                isMonitoring: this.isMonitoring,
                pollingActive: !!this.pollingInterval
            });
            
            this.emit('monitoringStarted');
            
        } catch (error) {
            this.log(`‚ùå Erreur d√©marrage monitoring: ${error.message}`, 'ERROR');
            this.log(`üìú Stack trace: ${error.stack}`, 'ERROR');
            this.diagnostics.errors++;
            throw error;
        }
    }

    startIntelligentPolling() {
        if (this.pollingInterval) {
            this.log('üîÑ Arr√™t du polling pr√©c√©dent...', 'POLLING');
            clearInterval(this.pollingInterval);
        }
        
        this.log('üì° D√©marrage du polling intelligent...', 'POLLING');
        this.logDebug('‚è±Ô∏è Intervalle configur√©: 10 secondes');
        
        // Polling plus fr√©quent que l'ancien syst√®me mais optimis√©
        this.pollingInterval = setInterval(async () => {
            if (this.isMonitoring) {
                this.diagnostics.pollingCycles++;
                this.diagnostics.lastScanTime = new Date();
                const startTime = Date.now();
                
                this.log(`üîç Cycle de polling #${this.diagnostics.pollingCycles}`, 'POLLING');
                await this.checkForChanges();
                
                const duration = Date.now() - startTime;
                this.diagnostics.scanDurations.push(duration);
                
                // Garder seulement les 10 derni√®res dur√©es
                if (this.diagnostics.scanDurations.length > 10) {
                    this.diagnostics.scanDurations.shift();
                }
                
                this.logDebug(`‚è±Ô∏è Cycle termin√© en ${duration}ms`);
                this.logDebug(`üìä Stats: Cycles=${this.diagnostics.pollingCycles}, Dossiers=${this.diagnostics.foldersScanned}, Emails=${this.diagnostics.emailsProcessed}, Erreurs=${this.diagnostics.errors}`);
            } else {
                this.log('‚è∏Ô∏è Polling suspendu (monitoring arr√™t√©)', 'POLLING');
            }
        }, 10000); // 10 secondes au lieu de 30
        
        this.log('üì° Polling intelligent d√©marr√© (intervalle: 10s)', 'POLLING');
    }

    async checkForChanges() {
        try {
            this.log(`üîç V√©rification des changements (${this.monitoredFolders.length} dossiers)`, 'SCAN');
            
            for (let i = 0; i < this.monitoredFolders.length; i++) {
                const folder = this.monitoredFolders[i];
                this.log(`üìÇ [${i+1}/${this.monitoredFolders.length}] Scan dossier: ${folder.name}`, 'SCAN');
                this.logDebug(`üìÇ D√©tails dossier:`, folder);
                
                await this.scanFolderForChanges(folder);
                this.diagnostics.foldersScanned++;
            }
            
            this.log('‚úÖ V√©rification des changements termin√©e', 'SCAN');
            
        } catch (error) {
            this.log(`‚ùå Erreur v√©rification changements: ${error.message}`, 'ERROR');
            this.log(`üìú Stack trace: ${error.stack}`, 'ERROR');
            this.diagnostics.errors++;
        }
    }

    async scanFolderForChanges(folder) {
        // Implementation optimis√©e qui ne v√©rifie que les changements r√©cents
        // au lieu de tous les emails
        this.log(`üîç V√©rification optimis√©e du dossier: ${folder.name}`, 'FOLDER');
        this.logDebug(`üìÅ Chemin: ${folder.path}, Type: ${folder.type}`);
        
        try {
            // Utiliser les m√©thodes disponibles sur le connecteur Outlook existant
            if (typeof this.outlookConnector.getFolderEmailsForMonitoring === 'function') {
                this.logDebug('üîß Utilisation de getFolderEmailsForMonitoring...');
                const emailsResult = await this.outlookConnector.getFolderEmailsForMonitoring(folder.path);
                
                // Adapter selon le format retourn√©
                let emails = [];
                if (Array.isArray(emailsResult)) {
                    emails = emailsResult;
                } else if (emailsResult && Array.isArray(emailsResult.emails)) {
                    emails = emailsResult.emails;
                } else if (emailsResult && emailsResult.data && Array.isArray(emailsResult.data)) {
                    emails = emailsResult.data;
                } else {
                    this.logDebug('‚ö†Ô∏è Format de r√©sultat inattendu pour scan:', emailsResult);
                    emails = [];
                }
                
                this.logDebug(`üìß ${emails.length} emails trouv√©s pour monitoring`);
                
                // Traiter seulement les 10 emails les plus r√©cents pour optimiser
                const recentEmails = emails.slice(0, 10);
                this.logDebug(`üìß Traitement de ${recentEmails.length} emails r√©cents`);
                
                for (const email of recentEmails) {
                    await this.processEmailForDatabase(email, folder);
                    this.diagnostics.emailsProcessed++;
                }
                
            } else if (typeof this.outlookConnector.getFolderEmails === 'function') {
                this.logDebug('üîß Utilisation de getFolderEmails...');
                const emailsResult = await this.outlookConnector.getFolderEmails(folder.path);
                
                // M√™me logique d'adaptation
                let emails = [];
                if (Array.isArray(emailsResult)) {
                    emails = emailsResult;
                } else if (emailsResult && Array.isArray(emailsResult.emails)) {
                    emails = emailsResult.emails;
                } else {
                    emails = [];
                }
                
                this.logDebug(`üìß ${emails.length} emails trouv√©s`);
                
                // Traiter seulement les 10 emails les plus r√©cents pour optimiser
                const recentEmails = emails.slice(0, 10);
                this.logDebug(`üìß Traitement de ${recentEmails.length} emails r√©cents`);
                
                for (const email of recentEmails) {
                    await this.processEmailForDatabase(email, folder);
                    this.diagnostics.emailsProcessed++;
                }
                
            } else {
                this.logDebug('‚ö†Ô∏è Aucune m√©thode de r√©cup√©ration d\'emails disponible');
                this.log(`‚ö†Ô∏è Connecteur Outlook incompatible pour le scan de ${folder.name}`, 'WARNING');
            }
            
            this.log(`‚úÖ Scan termin√© pour: ${folder.name}`, 'FOLDER');
            
        } catch (error) {
            this.log(`‚ùå Erreur scan dossier ${folder.name}: ${error.message}`, 'ERROR');
            this.logDebug(`üìú Stack trace: ${error.stack}`);
            this.diagnostics.errors++;
        }
    }

    async stopMonitoring() {
        this.log('‚èπÔ∏è Arr√™t du monitoring...', 'STOP');
        this.logDebug('‚èπÔ∏è √âtat avant arr√™t:', {
            isMonitoring: this.isMonitoring,
            pollingInterval: !!this.pollingInterval,
            debounceTimers: this.eventDebounceTimers.size
        });
        
        this.isMonitoring = false;
        
        // Arr√™ter le polling
        if (this.pollingInterval) {
            this.log('üì° Arr√™t du polling intelligent...', 'POLLING');
            clearInterval(this.pollingInterval);
            this.pollingInterval = null;
            this.log('‚úÖ Polling arr√™t√©', 'POLLING');
        } else {
            this.log('‚ÑπÔ∏è Aucun polling actif √† arr√™ter', 'INFO');
        }
        
        // Arr√™ter les timers de debouncing
        if (this.eventDebounceTimers.size > 0) {
            this.log(`üîÑ Nettoyage de ${this.eventDebounceTimers.size} timers de debouncing...`, 'CLEANUP');
            for (const timer of this.eventDebounceTimers.values()) {
                clearTimeout(timer);
            }
            this.eventDebounceTimers.clear();
            this.log('‚úÖ Timers de debouncing nettoy√©s', 'CLEANUP');
        }
        
        // Afficher les diagnostics
        this.log('üìä Statistiques de la session:', 'INFO');
        this.logDebug('üìä Diagnostics:', this.getDiagnostics());
        
        this.log('‚úÖ Monitoring arr√™t√©', 'SUCCESS');
        this.emit('monitoringStopped');
    }

    async performInitialSync() {
        this.log('üîÑ D√©marrage de la synchronisation initiale...', 'SYNC');
        
        try {
            let totalEmails = 0;
            let totalProcessed = 0;
            
            for (const folder of this.monitoredFolders) {
                this.log(`üìÅ Synchronisation du dossier: ${folder.name}`, 'SYNC');
                this.logDebug(`üìÅ Chemin: ${folder.path}`);
                
                try {
                    let emails = [];
                    
                    // Utiliser les m√©thodes disponibles
                    if (typeof this.outlookConnector.getFolderEmailsForMonitoring === 'function') {
                        this.logDebug('üîß Utilisation de getFolderEmailsForMonitoring pour sync...');
                        const emailsResult = await this.outlookConnector.getFolderEmailsForMonitoring(folder.path);
                        
                        // V√©rifier le format du r√©sultat
                        this.logDebug('üîç Format du r√©sultat:', typeof emailsResult);
                        this.logDebug('üîç R√©sultat d√©taill√©:', emailsResult);
                        
                        // Adapter selon le format retourn√©
                        if (Array.isArray(emailsResult)) {
                            emails = emailsResult;
                        } else if (emailsResult && Array.isArray(emailsResult.emails)) {
                            emails = emailsResult.emails;
                        } else if (emailsResult && emailsResult.data && Array.isArray(emailsResult.data)) {
                            emails = emailsResult.data;
                        } else {
                            this.log(`‚ö†Ô∏è Format de r√©sultat inattendu pour ${folder.name}`, 'WARNING');
                            this.logDebug('üìä R√©sultat re√ßu:', emailsResult);
                            emails = [];
                        }
                        
                    } else if (typeof this.outlookConnector.getFolderEmails === 'function') {
                        this.logDebug('üîß Utilisation de getFolderEmails pour sync...');
                        const emailsResult = await this.outlookConnector.getFolderEmails(folder.path);
                        
                        // M√™me logique d'adaptation
                        if (Array.isArray(emailsResult)) {
                            emails = emailsResult;
                        } else if (emailsResult && Array.isArray(emailsResult.emails)) {
                            emails = emailsResult.emails;
                        } else {
                            emails = [];
                        }
                        
                    } else {
                        this.log(`‚ö†Ô∏è Aucune m√©thode de r√©cup√©ration disponible pour ${folder.name}`, 'WARNING');
                        continue;
                    }
                    
                    totalEmails += emails.length;
                    this.logDebug(`üìß ${emails.length} emails r√©cup√©r√©s de ${folder.name}`);
                    
                    // Traiter les emails r√©cup√©r√©s (limiter √† 50 pour la sync initiale)
                    const emailsToProcess = emails.slice(0, 50);
                    this.logDebug(`üìß Traitement de ${emailsToProcess.length} emails pour sync initiale`);
                    
                    for (const emailData of emailsToProcess) {
                        await this.processEmailForDatabase(emailData, folder);
                        totalProcessed++;
                    }
                    
                    this.log(`‚úÖ Dossier ${folder.name}: ${emailsToProcess.length}/${emails.length} emails trait√©s`, 'SYNC');
                    
                } catch (error) {
                    this.log(`‚ùå Erreur sync dossier ${folder.name}: ${error.message}`, 'ERROR');
                    this.logDebug(`üìú Stack trace: ${error.stack}`);
                    this.diagnostics.errors++;
                }
            }
            
            this.initialSyncCompleted = true;
            this.log(`‚úÖ Synchronisation initiale termin√©e: ${totalProcessed}/${totalEmails} emails trait√©s`, 'SUCCESS');
            this.logDebug(`üìä R√©sultat sync: ${totalProcessed} trait√©s sur ${totalEmails} trouv√©s`);
            
            this.emit('initialSyncCompleted', { totalEmails, totalProcessed });
            
        } catch (error) {
            this.log(`‚ùå Erreur synchronisation initiale: ${error.message}`, 'ERROR');
            this.log(`üìú Stack trace: ${error.stack}`, 'ERROR');
            this.diagnostics.errors++;
            throw error;
        }
    }

    async handleNewMailEvent(data) {
        // Debouncing pour √©viter les √©v√©nements en rafale
        this.debounceEvent('newMail', async () => {
            this.log('üì¨ Traitement √©v√©nement nouveau mail');
            
            // D√©clencher une v√©rification cibl√©e
            await this.checkForNewEmails();
            
            this.emit('newEmailDetected', data);
        });
    }

    async handleItemAddEvent(data) {
        if (!data.entryId) return;
        
        this.debounceEvent(`itemAdd_${data.entryId}`, async () => {
            try {
                this.log(`‚ûï Traitement ajout email: ${data.entryId}`);
                
                // R√©cup√©rer les d√©tails de l'email
                const emailData = await this.outlookConnector.getEmailByEntryId(data.entryId);
                
                if (emailData) {
                    // V√©rifier si l'email est dans un dossier monitor√©
                    const folder = this.findMonitoredFolder(emailData.FolderPath);
                    
                    if (folder) {
                        await this.processEmailForDatabase(emailData, folder);
                        
                        this.emit('emailAdded', {
                            email: emailData,
                            folder: folder
                        });
                    }
                }
                
            } catch (error) {
                this.log(`‚ùå Erreur traitement ajout: ${error.message}`);
            }
        });
    }

    async handleItemChangeEvent(data) {
        if (!data.entryId) return;
        
        this.debounceEvent(`itemChange_${data.entryId}`, async () => {
            try {
                this.log(`üìù Traitement modification email: ${data.entryId}`);
                
                // R√©cup√©rer les d√©tails de l'email
                const emailData = await this.outlookConnector.getEmailByEntryId(data.entryId);
                
                if (emailData) {
                    // V√©rifier si l'email est dans un dossier monitor√©
                    const folder = this.findMonitoredFolder(emailData.FolderPath);
                    
                    if (folder) {
                        // Mettre √† jour le statut de l'email
                        await this.updateEmailStatus(emailData, folder);
                        
                        this.emit('emailChanged', {
                            email: emailData,
                            folder: folder,
                            unread: data.unread
                        });
                    }
                }
                
            } catch (error) {
                this.log(`‚ùå Erreur traitement modification: ${error.message}`);
            }
        });
    }

    async handleItemRemoveEvent(data) {
        this.debounceEvent('itemRemove', async () => {
            this.log('üóëÔ∏è Traitement suppression email');
            
            // Marquer les emails supprim√©s dans la BDD
            await this.markDeletedEmailsInDatabase();
            
            this.emit('emailRemoved', data);
        });
    }

    debounceEvent(eventKey, callback) {
        // Annuler le timer pr√©c√©dent s'il existe
        if (this.eventDebounceTimers.has(eventKey)) {
            clearTimeout(this.eventDebounceTimers.get(eventKey));
        }
        
        // Cr√©er un nouveau timer
        const timer = setTimeout(async () => {
            this.eventDebounceTimers.delete(eventKey);
            await callback();
        }, this.config.eventDebounceMs);
        
        this.eventDebounceTimers.set(eventKey, timer);
    }

    findMonitoredFolder(folderPath) {
        return this.monitoredFolders.find(folder => 
            folderPath && folderPath.includes(folder.path.split('\\').slice(-1)[0])
        );
    }

    async processEmailForDatabase(emailData, folderConfig) {
        try {
            // V√©rifier si l'email existe d√©j√†
            const existingEmail = await this.dbService.getEmailByEntryId(emailData.EntryID);
            
            if (existingEmail) {
                // Mettre √† jour l'email existant
                await this.updateEmailStatus(emailData, folderConfig);
            } else {
                // Ajouter le nouvel email
                await this.addNewEmailToDatabase(emailData, folderConfig);
            }
            
        } catch (error) {
            this.log(`‚ùå Erreur traitement BDD: ${error.message}`);
        }
    }

    async addNewEmailToDatabase(emailData, folderConfig) {
        const emailRecord = {
            entry_id: emailData.EntryID,
            subject: emailData.Subject || '',
            sender: emailData.SenderEmailAddress || '',
            received_time: new Date(emailData.ReceivedTime),
            is_read: !emailData.UnRead,
            size: emailData.Size || 0,
            folder_path: emailData.FolderPath,
            folder_type: folderConfig.type,
            is_treated: false,
            created_at: new Date()
        };
        
        await this.dbService.insertEmail(emailRecord);
        
        // Logger l'√©v√©nement
        if (this.config.enableEventLogging) {
            await this.dbService.logEmailEvent(
                emailRecord.entry_id,
                emailRecord.is_read ? 'read' : 'unread',
                new Date()
            );
        }
        
        this.log(`üìß Nouvel email ajout√©: ${emailRecord.subject}`);
    }

    async updateEmailStatus(emailData, folderConfig) {
        try {
            const isRead = !emailData.UnRead;
            
            // Mettre √† jour le statut
            await this.dbService.updateEmailStatus(emailData.EntryID, {
                is_read: isRead,
                size: emailData.Size || 0,
                folder_path: emailData.FolderPath
            });
            
            // Logger l'√©v√©nement de changement de statut
            if (this.config.enableEventLogging) {
                await this.dbService.logEmailEvent(
                    emailData.EntryID,
                    isRead ? 'read' : 'unread',
                    new Date()
                );
            }
            
            // Marquer comme trait√© si configur√©
            const appSettings = await this.dbService.loadAppSettings();
            if (appSettings.monitoring.treatReadEmailsAsProcessed && isRead) {
                await this.dbService.markEmailAsTreated(emailData.EntryID);
                
                if (this.config.enableEventLogging) {
                    await this.dbService.logEmailEvent(
                        emailData.EntryID,
                        'treated',
                        new Date()
                    );
                }
            }
            
            this.log(`üìù Email mis √† jour: ${emailData.Subject}`);
            
        } catch (error) {
            this.log(`‚ùå Erreur mise √† jour statut: ${error.message}`);
        }
    }

    async checkForNewEmails() {
        // V√©rification cibl√©e des nouveaux emails (m√©thode de fallback)
        this.log('üîç V√©rification cibl√©e des nouveaux emails...');
        
        for (const folder of this.monitoredFolders) {
            try {
                // R√©cup√©rer seulement les 10 emails les plus r√©cents
                const recentEmails = await this.outlookConnector.performInitialSync(folder.path);
                
                // Ne traiter que les nouveaux
                for (const emailData of recentEmails.emails.slice(0, 10)) {
                    const exists = await this.dbService.getEmailByEntryId(emailData.EntryID);
                    if (!exists) {
                        await this.processEmailForDatabase(emailData, folder);
                    }
                }
                
            } catch (error) {
                this.log(`‚ùå Erreur v√©rification dossier ${folder.name}: ${error.message}`);
            }
        }
    }

    async markDeletedEmailsInDatabase() {
        // Marquer les emails qui ne sont plus pr√©sents comme supprim√©s
        try {
            await this.dbService.markMissingEmailsAsDeleted();
            this.log('üóëÔ∏è Emails supprim√©s marqu√©s en base');
        } catch (error) {
            this.log(`‚ùå Erreur marquage suppressions: ${error.message}`);
        }
    }

    // M√©thodes publiques pour l'API
    async getMonitoringStatus() {
        this.log('üìä R√©cup√©ration du statut de monitoring...', 'INFO');
        
        const status = {
            isInitialized: this.isInitialized,
            isMonitoring: this.isMonitoring,
            initialSyncCompleted: this.initialSyncCompleted,
            outlookConnected: this.outlookConnector?.connected || false,
            eventListenersActive: this.outlookConnector?.hasEventListeners || false,
            monitoredFoldersCount: this.monitoredFolders.length,
            diagnostics: this.getDiagnostics()
        };
        
        this.logDebug('üìä Statut d√©taill√©:', status);
        this.log(`üìä Statut: Init=${status.isInitialized}, Monitor=${status.isMonitoring}, Sync=${status.initialSyncCompleted}, Outlook=${status.outlookConnected}`, 'INFO');
        
        return status;
    }

    async forceSync() {
        if (!this.isInitialized) {
            throw new Error('Service non initialis√©');
        }
        
        this.log('üîÑ Synchronisation forc√©e demand√©e...');
        this.initialSyncCompleted = false;
        await this.performInitialSync();
    }

    async cleanup() {
        this.log('üßπ Arr√™t du service de monitoring...', 'CLEANUP');
        this.logDebug('üßπ √âtat avant cleanup:', {
            isInitialized: this.isInitialized,
            isMonitoring: this.isMonitoring,
            pollingInterval: !!this.pollingInterval,
            eventTimers: this.eventDebounceTimers.size
        });
        
        await this.stopMonitoring();
        
        if (this.outlookConnector && typeof this.outlookConnector.cleanup === 'function') {
            this.log('üîå Nettoyage du connecteur Outlook...', 'CLEANUP');
            await this.outlookConnector.cleanup();
        } else {
            this.log('‚ö†Ô∏è Pas de m√©thode cleanup sur le connecteur Outlook', 'WARNING');
        }
        
        this.removeAllListeners();
        
        // Afficher les statistiques finales
        this.log('üìä Statistiques finales:', 'SUCCESS');
        this.logDebug('üìä Diagnostics finaux:', this.getDiagnostics());
        
        this.log('‚úÖ Service de monitoring arr√™t√©', 'SUCCESS');
    }

    log(message, category = 'INFO') {
        const timestamp = new Date().toISOString();
        const prefix = this.getCategoryPrefix(category);
        console.log(`[${timestamp}] OptimizedMonitoring: ${prefix} ${message}`);
    }

    logDebug(message, data = null) {
        if (this.config.detailedLogging) {
            const timestamp = new Date().toISOString();
            if (data) {
                console.log(`[${timestamp}] OptimizedMonitoring: üîç ${message}`, data);
            } else {
                console.log(`[${timestamp}] OptimizedMonitoring: üîç ${message}`);
            }
        }
    }

    getCategoryPrefix(category) {
        const prefixes = {
            'INIT': 'üöÄ',
            'CONFIG': '‚öôÔ∏è',
            'DB': 'üóÑÔ∏è',
            'MODE': '‚ö°',
            'AUTO': 'üîÑ',
            'POLLING': 'üì°',
            'SCAN': 'üîç',
            'FOLDER': 'üìÇ',
            'EMAIL': 'üìß',
            'WARNING': '‚ö†Ô∏è',
            'ERROR': '‚ùå',
            'SUCCESS': '‚úÖ',
            'INFO': '‚ÑπÔ∏è'
        };
        return prefixes[category] || '‚ÑπÔ∏è';
    }

    // M√©thode pour obtenir les diagnostics
    getDiagnostics() {
        const avgScanTime = this.diagnostics.scanDurations.length > 0 
            ? this.diagnostics.scanDurations.reduce((a, b) => a + b, 0) / this.diagnostics.scanDurations.length 
            : 0;
            
        return {
            ...this.diagnostics,
            averageScanTime: Math.round(avgScanTime),
            uptime: this.diagnostics.lastScanTime ? Date.now() - this.diagnostics.lastScanTime.getTime() : 0
        };
    }
}

module.exports = OptimizedMonitoringService;
