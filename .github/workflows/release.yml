name: Release on Push (Windows)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-and-publish:
    runs-on: windows-latest
    permissions:
      contents: write   # allow creating releases and uploading assets
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Prepare native deps for Electron
        run: npx electron-builder install-app-deps

      - name: Inject updater token (for private releases)
        shell: bash
        run: |
          TOKEN_VALUE="${PRIVATE_UPDATER_TOKEN:-}"
          if [ -n "$TOKEN_VALUE" ]; then
            echo "Creating src/main/updaterToken.js from secret env"
            mkdir -p src/main
            printf 'module.exports = "%s";\n' "$TOKEN_VALUE" > src/main/updaterToken.js
            echo "Token file created (not printed)"
          else
            echo "No PRIVATE_UPDATER_TOKEN env provided; skipping token injection"
          fi

      - name: Check if version changed
        shell: bash
        id: check_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Version: $VERSION"
          git fetch --tags --force
          if git rev-parse -q --verify "refs/tags/v$VERSION" >/dev/null; then
            echo "Version tag already exists: v$VERSION"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected: v$VERSION"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Create version tag
        if: steps.check_version.outputs.should_release == 'true'
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Build and publish (electron-builder)
        if: steps.check_version.outputs.should_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx electron-builder --win --x64 --publish always
