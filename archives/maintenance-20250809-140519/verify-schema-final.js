const Database = require('better-sqlite3');

console.log('üîç V√©rification du sch√©ma final de la base de donn√©es...');

try {
    const db = new Database('./data/emails.db', { readonly: true });
    
    // R√©cup√©rer le sch√©ma de la table emails
    const tableInfo = db.prepare("PRAGMA table_info(emails)").all();
    
    console.log('\nüìã Colonnes actuelles de la table emails:');
    console.log('Index | Nom de la colonne | Type | Nullable | D√©faut | Cl√© primaire');
    console.log('------|-------------------|------|----------|---------|---------------');
    
    tableInfo.forEach(col => {
        console.log(`${col.cid.toString().padEnd(5)} | ${col.name.padEnd(17)} | ${col.type.padEnd(4)} | ${col.notnull ? 'Non' : 'Oui'} | ${(col.dflt_value || 'NULL').toString().padEnd(7)} | ${col.pk ? 'Oui' : 'Non'}`);
    });
    
    console.log(`\nüìä Total: ${tableInfo.length} colonnes`);
    
    // V√©rifier si event_type existe encore
    const hasEventType = tableInfo.some(col => col.name === 'event_type');
    if (hasEventType) {
        console.log('‚ùå La colonne event_type existe encore ! Il faut la supprimer.');
    } else {
        console.log('‚úÖ La colonne event_type a √©t√© correctement supprim√©e.');
    }
    
    db.close();
    
} catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
}
